// 
// Lista de cargos
const listOfCharges = [
    { name: "Dueño", licenciaImg: "licencia.png" },
    { name: "Administrador-General", licenciaImg: "licencia.png" },
    { name: "Administrador-Sucursal", licenciaImg: "licencia.png" },
    { name: "Chofer", licenciaImg: "licencia.png" },
    { name: "Secretaria(o)", licenciaImg: "licencia.png" },
    { name: "Boletero(a)", licenciaImg: "licencia.png" },
  ];

//   UserRegistration
//Cargos
const [charges, setCharges] = useState({ name: "" });
const [openCharges, toggleOpenCharges] = useState(false);
const handleCloseCharges = () => {
  setDialogValueCharges({
    name: "",
    licenciaImg: "",
  });

  toggleOpenCharges(false);
};

const [dialogValueCharges, setDialogValueCharges] = useState({
  name: "",
  licenciaImg: "",
});

const handleSubmitCharges = (event) => {
  event.preventDefault();
  setCharges({
    name: dialogValueCharges.name,
    licenciaImg: dialogValueCharges.licenciaImg,
  });

  handleCloseCharges();
};
console.log("cargo", charges);

// return

{/* Cargos */}
<Autocomplete
value={charges}
onChange={(event, newValue) => {
  if (typeof newValue === "string") {
    setTimeout(() => {
      toggleOpenCharges(true);
      setDialogValueCharges({
        name: newValue,
        licenciaImg: "",
      });
    });
  } else if (newValue && newValue.inputValue) {
    toggleOpenCharges(true);
    setDialogValueCharges({
      name: newValue.inputValue,
      licenciaImg: "",
    });
  } else {
    setCharges(newValue);
  }
}}
filterOptions={(options, params) => {
  const filtered = filter(options, params);

  if (params.inputValue !== "") {
    filtered.push({
      inputValue: params.inputValue,
      name: `Añadir "${params.inputValue}"`,
    });
  }

  return filtered;
}}
id="free-solo-dialog-demo"
options={listOfCharges}
getOptionLabel={(option) => {
  if (typeof option === "string") {
    return option;
  }
  if (option.inputValue) {
    return option.inputValue;
  }
  return option.name;
}}
selectOnFocus
clearOnBlur
handleHomeEndKeys
renderOption={(props, option) => <li {...props}>{option.name}</li>}
sx={{ width: 300 }}
freeSolo
renderInput={(params) => <TextField {...params} label="Cargo" />}
/>
<Dialog open={openCharges} onClose={handleCloseCharges}>
<form onSubmit={handleSubmitCharges}>
  <DialogTitle>AÑADIR UN NUEVO CARGO</DialogTitle>
  <DialogContent>
    <DialogContentText>
      Por favor ingresa los datos correspondientes
    </DialogContentText>
    <TextField
      autoFocus
      margin="dense"
      id="name"
      value={dialogValueCharges.name}
      onChange={(event) =>
        setDialogValueCharges({
          ...dialogValueCharges,
          name: event.target.value,
        })
      }
      label="Cargo"
      type="text"
      variant="standard"
    />
  </DialogContent>
  <DialogActions>
    <Button onClick={handleCloseCharges}>Cancelar</Button>
    <Button type="submit">Añadir</Button>
  </DialogActions>
</form>
</Dialog>

{charges.name === "Chofer" ? (
<TextField
  margin="dense"
  id="licenciaImg"
  onChange={(event) =>
    setCharges({
      ...charges,
      licenciaImg: event.target.value,
    })
  }
  label="Licencia(Foto)"
  type="text"
  variant="standard"
/>
) : (
""
)}

