*PETICIONES
put:
patch: 
> no pude actualizar al mismo tiempo 2 propiedades, que se encuentren en 2 recursos diferentes, pues eliminara lo que no que no se haya especificado(parecido al put). se hizo la prueba de de actualizar un {} y un []
Post:
Delete:

*ARRAYS
put:
> necesita de todo el recurso(en caso de arrays), para actualizar datos.
>Es necesario hacer uso de este verbo para crear un nuevo elemento dentro del array(sin que nos genere una propiedad aleatoria dentro de la posision del array creado)
patch:
> no funciona en un recursos tipo arrays
Post:
> No usar en arrays ya que nos genera una propiedad aleatoria, dentro de la posiison que hayamos indicado en la peticion url.
Delete:
> funciona bien con arrays


*FIREBASE
>Firebase: Guarda datos como transacciones
>url: https://firebase.google.com/docs/database/web/read-and-write?hl=es-419#save_data_as_transactions
Cuando trabajas con datos que se podrían dañar si se hacen cambios simultáneos (por ejemplo, contadores incrementales) puedes usar una operación de transacción.

*VARIOS FUNCIONES EN 1 onClick 
<Button
        variant="contained"
        color={!pdfOpen ? 'success' : 'error'}
        onClick={() => [
          handlePrint,
          setPdfOpen(!pdfOpen),
          console.log(pdfOpen ? 'Ocultando pdf' : 'Mostrando pdf'),
        ]}
      >
        {!pdfOpen ? 'Imprimir Ahora' : 'Cerrar pdf'}
</Button>
